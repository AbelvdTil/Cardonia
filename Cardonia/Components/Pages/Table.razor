@page "/table";

@using Cardonia.Model;
@implements IRerenderable;

@rendermode InteractiveServer

<h3>Cardonia</h3>

@if (OppositeTable is not null)
{
    <p>Opponent: @OppositeTable.PlayerName</p>
    <p>Cards in hand: @OppositeTable.HandSize </p>
    <p>Cards in deck: @OppositeTable.DeckSize</p>

    <Cardonia.Components.Components.BoardComponent PlayerTable="OppositeTable" @ref="OppositeTableComponent" />
}
else
{
    <p>No oponent joined the table.</p>
}

-----

@if (OwnTable is not null)
{
    <Cardonia.Components.Components.BoardComponent PlayerTable="OwnTable" @ref="OwnTableComponent" />

    <p>Cards in deck: @OwnTable.DeckSize</p>
    <p>Cards in hand: @OwnTable.HandSize </p>
    <p>You: @OwnTable.PlayerName</p>

    <button class="btn btn-primary" @onclick="OwnTable.DrawCard">Draw Card</button>
    <input @bind-value="pos" />
    <button class="btn btn-primary" @onclick="() => OwnTable.PlayCard(pos)">Play Card</button>
}
else
{
    <p>You did not join table.</p>

    <input @bind-value="Name" />

    <button class="btn btn-primary" @onclick="JoinTable">Join</button>
}

<button class="btn btn-primary" @onclick="Rerender">Render</button>
<button class="btn btn-primary" @onclick="() =>TableManager.Leave(Name)">Leave</button>



@code {
    private string Name { get; set; } = "";

    private int pos { get; set; }

    private TableManager TableManager { get; set; }

    private PlayerTable? OwnTable => TableManager.GetTable(Name);

    private PlayerTable? OppositeTable => TableManager.GetEnemyTable(Name);

    private IRerenderable? OppositeTableComponent { get; set; }

    private IRerenderable? OwnTableComponent { get; set; }

    public void Rerender()
    {
        OppositeTableComponent?.Rerender();
        OwnTableComponent?.Rerender();

        InvokeAsync(StateHasChanged);
    }


    protected override void OnInitialized()
    {
        TableManager = State.Instance.TableManager;

        TableManager.Subscribe(this);
    }

    protected void JoinTable()
    {
        TableManager.Join(Name);
    }
}
