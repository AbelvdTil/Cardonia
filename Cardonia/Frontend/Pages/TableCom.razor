@page "/table";

@using Cardonia.Frontend.Components
@using Cardonia.Model;
@using Cardonia.Model.Cards
@using Cardonia.Model.Enums
@using Cardonia.Model.Table;

@rendermode InteractiveServer

<h3>Cardonia</h3>

@if (OpponentTable is not null)
{
    <p>Opponent: @table.PlayerName</p>
    <p>Cards in hand: @OpponentTable.HandSize </p>
    <p>Cards in deck: @OpponentTable.DeckSize</p>

    <BoardComponent PlayerTable="OpponentTable" @ref="OppositeTableComponent" />
}
else
{
    <p>No oponent joined the table.</p>
}

-----

@if (OwnTable is not null)
{
    <BoardComponent PlayerTable="OwnTable" @ref="OwnTableComponent" />

    <p>Cards in deck: @OwnTable.DeckSize</p>
    <p>Cards in hand: @OwnTable.HandSize </p>
    <p>You: @OwnTable.PlayerName</p>

    <button class="btn btn-primary" @onclick="OwnTable.DrawCard">Draw Card</button>
    <input @bind-value="pos" />
    <button class="btn btn-primary" @onclick="() => OwnTable.PlayCard(new Card(), pos)">Play Card</button>
}
else
{
    <p>You did not join table.</p>

    <input @bind-value="Name" />

    <button class="btn btn-primary" @onclick="JoinTable">Join</button>
}

<button class="btn btn-primary" @onclick="StateHasChanged">Render</button>
<button class="btn btn-primary" @onclick="() =>TableManager.Leave(Name)">Leave</button>



@code {
    private string Name { get; set; } = "";

    private int pos { get; set; }

    private Table table { get; set; }

    private PlayerColor color { get; set; }

    protected override void OnInitialized()
    {
        table = State.Instance.TableManager.Table;

        table.UpdateEvent += async () => await InvokeAsync(() => StateHasChanged());
    }

    protected void JoinTable()
    {
        OwnTable = table.Join(Name);

        if 
    }
}
